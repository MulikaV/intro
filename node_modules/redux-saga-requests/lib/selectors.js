"use strict";

exports.__esModule = true;
exports.getMutation = exports.getQuery = void 0;

var _reselect = require("reselect");

var defaultQueryState = {
  data: null,
  pending: 0,
  error: null
};

var getData = function getData(data, multiple, defaultData) {
  if (data !== null) {
    return data;
  }

  if (defaultData !== undefined) {
    return defaultData;
  }

  if (multiple) {
    return [];
  }

  return data;
};

var getQuery = function getQuery(_ref) {
  var requestSelector = _ref.requestSelector,
      type = _ref.type,
      defaultData = _ref.defaultData,
      _ref$multiple = _ref.multiple,
      multiple = _ref$multiple === void 0 ? false : _ref$multiple;
  return (0, _reselect.createSelector)(function (state) {
    return requestSelector ? requestSelector(state) : state.network.queries[type] || defaultQueryState;
  }, function (queryState) {
    return {
      data: getData(queryState.data, multiple, defaultData),
      loading: queryState.pending === undefined ? queryState.loading : queryState.pending > 0,
      error: queryState.error
    };
  });
};

exports.getQuery = getQuery;
var defaultMutation = {
  loading: false,
  error: null
};

var getMutation = function getMutation(_ref2) {
  var requestSelector = _ref2.requestSelector,
      type = _ref2.type,
      requestKey = _ref2.requestKey;
  return (0, _reselect.createSelector)(function (state) {
    return requestSelector ? requestSelector(state).mutations[type] : state.network.mutations[type];
  }, function (mutationContainer) {
    if (!mutationContainer || requestKey && !mutationContainer[requestKey]) {
      return defaultMutation;
    }

    var mutation = requestKey ? mutationContainer[requestKey] : mutationContainer;
    return {
      loading: mutation.pending > 0,
      error: mutation.error
    };
  });
};

exports.getMutation = getMutation;