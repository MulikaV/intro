"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = sendRequest;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _effects = require("redux-saga/effects");

var _actions = require("../actions");

var _constants = require("../constants");

var _getRequestInstance = require("./get-request-instance");

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(sendRequest);

var getDriver = function getDriver(requestsConfig, action) {
  return action.meta && action.meta.driver ? requestsConfig.driver[action.meta.driver] : requestsConfig.driver["default"] || requestsConfig.driver;
};

function sendRequest(action, _temp) {
  var _ref, _ref$dispatchRequestA, dispatchRequestAction, _ref$silent, silent, _ref$runOnRequest, runOnRequest, _ref$runOnSuccess, runOnSuccess, _ref$runOnError, runOnError, _ref$runOnAbort, runOnAbort, runByInterceptor, requestsConfig, driver, actionPayload, _setContext, abortSource, response, responseError, _setContext2, _ref2, onErrorResponse, onErrorError, errorPayload, _setContext3, successPayload, _setContext4;

  return _regenerator["default"].wrap(function sendRequest$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _ref = _temp === void 0 ? {} : _temp, _ref$dispatchRequestA = _ref.dispatchRequestAction, dispatchRequestAction = _ref$dispatchRequestA === void 0 ? false : _ref$dispatchRequestA, _ref$silent = _ref.silent, silent = _ref$silent === void 0 ? false : _ref$silent, _ref$runOnRequest = _ref.runOnRequest, runOnRequest = _ref$runOnRequest === void 0 ? null : _ref$runOnRequest, _ref$runOnSuccess = _ref.runOnSuccess, runOnSuccess = _ref$runOnSuccess === void 0 ? null : _ref$runOnSuccess, _ref$runOnError = _ref.runOnError, runOnError = _ref$runOnError === void 0 ? null : _ref$runOnError, _ref$runOnAbort = _ref.runOnAbort, runOnAbort = _ref$runOnAbort === void 0 ? null : _ref$runOnAbort;

          if ((0, _actions.isRequestAction)(action)) {
            _context.next = 3;
            break;
          }

          throw new Error(_constants.INCORRECT_PAYLOAD_ERROR);

        case 3:
          _context.next = 5;
          return (0, _effects.getContext)(_constants.RUN_BY_INTERCEPTOR);

        case 5:
          runByInterceptor = _context.sent;
          _context.next = 8;
          return (0, _getRequestInstance.getRequestsConfig)();

        case 8:
          requestsConfig = _context.sent;

          if (!(dispatchRequestAction && !silent)) {
            _context.next = 16;
            break;
          }

          action = (0, _extends2["default"])({}, action, {
            meta: (0, _extends2["default"])({}, action.meta, {
              runByWatcher: false
            })
          });
          _context.next = 13;
          return (0, _effects.put)(action);

        case 13:
          action = _context.sent;

          if (!(action === null)) {
            _context.next = 16;
            break;
          }

          return _context.abrupt("return", {
            serverSide: true
          });

        case 16:
          _context.next = 18;
          return (0, _effects.call)(getDriver, requestsConfig, action);

        case 18:
          driver = _context.sent;
          actionPayload = (0, _actions.getActionPayload)(action);

          if (!(requestsConfig.onRequest && (runOnRequest !== null ? runOnRequest : runByInterceptor !== _constants.INTERCEPTORS.ON_REQUEST))) {
            _context.next = 26;
            break;
          }

          _context.next = 23;
          return (0, _effects.setContext)((_setContext = {}, _setContext[_constants.RUN_BY_INTERCEPTOR] = _constants.INTERCEPTORS.ON_REQUEST, _setContext));

        case 23:
          _context.next = 25;
          return (0, _effects.call)(requestsConfig.onRequest, actionPayload.request, action);

        case 25:
          actionPayload.request = _context.sent;

        case 26:
          abortSource = driver.getAbortSource();
          _context.prev = 27;
          _context.prev = 28;

          if (!(action.meta && action.meta.cacheResponse)) {
            _context.next = 33;
            break;
          }

          response = action.meta.cacheResponse;
          _context.next = 42;
          break;

        case 33:
          if (Array.isArray(actionPayload.request)) {
            _context.next = 39;
            break;
          }

          _context.next = 36;
          return (0, _effects.call)([driver, 'sendRequest'], actionPayload.request, abortSource, action);

        case 36:
          response = _context.sent;
          _context.next = 42;
          break;

        case 39:
          _context.next = 41;
          return (0, _effects.all)(actionPayload.request.map(function (requestItem) {
            return (0, _effects.call)([driver, 'sendRequest'], requestItem, abortSource, action);
          }));

        case 41:
          response = _context.sent;

        case 42:
          _context.next = 47;
          break;

        case 44:
          _context.prev = 44;
          _context.t0 = _context["catch"](28);
          responseError = _context.t0;

        case 47:
          if (!responseError) {
            _context.next = 65;
            break;
          }

          if (!(requestsConfig.onError && (runOnError !== null ? runOnError : runByInterceptor !== _constants.INTERCEPTORS.ON_ERROR))) {
            _context.next = 57;
            break;
          }

          _context.next = 51;
          return (0, _effects.setContext)((_setContext2 = {}, _setContext2[_constants.RUN_BY_INTERCEPTOR] = _constants.INTERCEPTORS.ON_ERROR, _setContext2));

        case 51:
          _context.next = 53;
          return (0, _effects.call)(requestsConfig.onError, responseError, action);

        case 53:
          _ref2 = _context.sent;
          onErrorResponse = _ref2.response;
          onErrorError = _ref2.error;

          if (onErrorResponse) {
            response = onErrorResponse;
          } else {
            responseError = onErrorError;
          }

        case 57:
          if (response) {
            _context.next = 65;
            break;
          }

          _context.next = 60;
          return (0, _effects.call)(driver.getErrorPayload, responseError);

        case 60:
          errorPayload = _context.sent;

          if (silent) {
            _context.next = 64;
            break;
          }

          _context.next = 64;
          return (0, _effects.put)((0, _actions.createErrorAction)(action, errorPayload));

        case 64:
          return _context.abrupt("return", {
            error: responseError
          });

        case 65:
          if (!(requestsConfig.onSuccess && (runOnSuccess !== null ? runOnSuccess : runByInterceptor !== _constants.INTERCEPTORS.ON_SUCCESS && runByInterceptor !== _constants.INTERCEPTORS.ON_ERROR))) {
            _context.next = 71;
            break;
          }

          _context.next = 68;
          return (0, _effects.setContext)((_setContext3 = {}, _setContext3[_constants.RUN_BY_INTERCEPTOR] = _constants.INTERCEPTORS.ON_SUCCESS, _setContext3));

        case 68:
          _context.next = 70;
          return (0, _effects.call)(requestsConfig.onSuccess, response, action);

        case 70:
          response = _context.sent;

        case 71:
          _context.next = 73;
          return (0, _effects.call)(driver.getSuccessPayload, response, actionPayload.request);

        case 73:
          successPayload = _context.sent;

          if (silent) {
            _context.next = 77;
            break;
          }

          _context.next = 77;
          return (0, _effects.put)((0, _actions.createSuccessAction)(action, successPayload, response));

        case 77:
          return _context.abrupt("return", {
            response: response
          });

        case 78:
          _context.prev = 78;
          _context.next = 81;
          return (0, _effects.cancelled)();

        case 81:
          if (!_context.sent) {
            _context.next = 92;
            break;
          }

          _context.next = 84;
          return (0, _effects.call)([driver, 'abortRequest'], abortSource);

        case 84:
          if (!(requestsConfig.onAbort && (runOnAbort !== null ? runOnAbort : runByInterceptor !== _constants.INTERCEPTORS.ON_ABORT))) {
            _context.next = 89;
            break;
          }

          _context.next = 87;
          return (0, _effects.setContext)((_setContext4 = {}, _setContext4[_constants.RUN_BY_INTERCEPTOR] = _constants.INTERCEPTORS.ON_ABORT, _setContext4));

        case 87:
          _context.next = 89;
          return (0, _effects.call)(requestsConfig.onAbort, action);

        case 89:
          if (silent) {
            _context.next = 92;
            break;
          }

          _context.next = 92;
          return (0, _effects.put)((0, _actions.createAbortAction)(action));

        case 92:
          return _context.finish(78);

        case 93:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[27,, 78, 93], [28, 44]]);
}