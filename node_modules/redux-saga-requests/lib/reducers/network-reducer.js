"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _actions = require("../actions");

var _defaultConfig = _interopRequireDefault(require("./default-config"));

var _requestsReducer = _interopRequireDefault(require("./requests-reducer"));

var _mutationsReducer = _interopRequireDefault(require("./mutations-reducer"));

var _default = function _default(localConfig) {
  var config = (0, _extends2["default"])({
    isRequestActionQuery: _actions.isRequestActionQuery
  }, _defaultConfig["default"], {}, localConfig, {
    handleMutationsState: false
  });
  var requestsReducers = {}; // for SSR hydration

  var initialized = false;
  var hydratedReducers = null;
  return function (state, action) {
    if (state === void 0) {
      state = {
        queries: {},
        mutations: {}
      };
    }

    if (!initialized && Object.keys(state.queries).length > 0 && Object.keys(requestsReducers).length === 0) {
      initialized = true;
      var queryKeys = Object.keys(state.queries);
      hydratedReducers = new Set(queryKeys);
      queryKeys.forEach(function (k) {
        requestsReducers[k] = (0, _requestsReducer["default"])((0, _extends2["default"])({}, config, {
          actionType: k
        }));
      });
    }

    if ((0, _actions.isRequestAction)(action) && config.isRequestActionQuery(action) && (!(action.type in requestsReducers) || hydratedReducers && hydratedReducers.has(action.type))) {
      requestsReducers[action.type] = (0, _requestsReducer["default"])((0, _extends2["default"])({}, config, {
        actionType: action.type
      }, action.meta));

      if (hydratedReducers) {
        hydratedReducers["delete"](action.type);
      }
    }

    var queries = Object.entries(requestsReducers).reduce(function (prev, _ref) {
      var actionType = _ref[0],
          reducer = _ref[1];
      prev[actionType] = reducer(state.queries[actionType], action);
      return prev;
    }, {});
    var _state = state,
        mutations = _state.mutations;

    if ((0, _actions.isRequestAction)(action) && !config.isRequestActionQuery(action) || (0, _actions.isResponseAction)(action) && !config.isRequestActionQuery((0, _actions.getRequestActionFromResponse)(action))) {
      mutations = (0, _mutationsReducer["default"])(mutations, action, config, {
        getRequestKey: action.meta && action.meta.mutations ? action.meta.mutations.getRequestKey : null
      });
    }

    return {
      queries: queries,
      mutations: mutations
    };
  };
};

exports["default"] = _default;