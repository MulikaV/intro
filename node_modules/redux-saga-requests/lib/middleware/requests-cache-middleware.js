"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _constants = require("../constants");

var _actions = require("../actions");

var isCacheValid = function isCacheValid(cache) {
  return cache.expiring === null || Date.now() <= cache.expiring;
};

var getNewCacheTimeout = function getNewCacheTimeout(cache) {
  return cache === true ? null : cache * 1000 + Date.now();
};

var getCacheKey = function getCacheKey(action) {
  return action.type + (action.meta.cacheKey || '');
};

var _default = function _default() {
  var cacheMap = new Map();
  return function () {
    return function (next) {
      return function (action) {
        if (action.type === _constants.GET_REQUEST_CACHE) {
          return cacheMap;
        }

        if (action.type === _constants.CLEAR_REQUESTS_CACHE) {
          if (action.actionTypes.length === 0) {
            cacheMap.clear();
          } else {
            action.actionTypes.forEach(function (actionType) {
              return cacheMap["delete"](actionType);
            });
          }

          return null;
        }

        if ((0, _actions.isRequestAction)(action) && action.meta && action.meta.cache) {
          var cacheKey = getCacheKey(action);
          var cacheValue = cacheMap.get(cacheKey);

          if (cacheValue && isCacheValid(cacheValue)) {
            return next((0, _extends2["default"])({}, action, {
              meta: (0, _extends2["default"])({}, action.meta, {
                cacheResponse: cacheValue.response
              })
            }));
          } else if (cacheValue && !isCacheValid(cacheValue)) {
            cacheMap["delete"](cacheKey);
          }
        } else if ((0, _actions.isSuccessAction)(action) && action.meta && action.meta.cache && !action.meta.cacheResponse) {
          var requestAction = (0, _actions.getRequestActionFromResponse)(action);

          if (action.meta.cacheKey && action.meta.cacheSize) {
            var currentCacheKeys = Array.from(cacheMap.keys()).filter(function (k) {
              return k.startsWith(requestAction.type);
            });

            if (action.meta.cacheSize === currentCacheKeys.length) {
              cacheMap["delete"](currentCacheKeys[0]);
            }
          }

          cacheMap.set(getCacheKey(requestAction), {
            response: (0, _actions.getActionPayload)(action).response,
            expiring: getNewCacheTimeout(action.meta.cache)
          });
        }

        return next(action);
      };
    };
  };
};

exports["default"] = _default;