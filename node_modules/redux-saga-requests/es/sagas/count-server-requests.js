import _regeneratorRuntime from "@babel/runtime/regenerator";

var _marked =
/*#__PURE__*/
_regeneratorRuntime.mark(countServerRequests);

import { take, put } from 'redux-saga/effects';
import { END } from 'redux-saga';
import { getRequestActionFromResponse, isRequestAction, isResponseAction, isSuccessAction } from '../actions';
export default function countServerRequests(_ref) {
  var serverRequestActions, _ref$finishOnFirstErr, finishOnFirstError, index, action;

  return _regeneratorRuntime.wrap(function countServerRequests$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          serverRequestActions = _ref.serverRequestActions, _ref$finishOnFirstErr = _ref.finishOnFirstError, finishOnFirstError = _ref$finishOnFirstErr === void 0 ? true : _ref$finishOnFirstErr;
          index = 0;
          serverRequestActions.requestActionsToIgnore = [];
          serverRequestActions.successActions = [];
          serverRequestActions.dependentSuccessActions = [];
          serverRequestActions.errorActions = [];

        case 6:
          if (!true) {
            _context.next = 30;
            break;
          }

          _context.next = 9;
          return take(function (a) {
            return isRequestAction(a) || isResponseAction(a);
          });

        case 9:
          action = _context.sent;

          if (!isRequestAction(action)) {
            _context.next = 13;
            break;
          }

          index += action.meta && action.meta.dependentRequestsNumber !== undefined ? action.meta.dependentRequestsNumber + 1 : 1;
          return _context.abrupt("continue", 6);

        case 13:
          if (isSuccessAction(action)) {
            _context.next = 21;
            break;
          }

          serverRequestActions.errorActions.push(action);

          if (!finishOnFirstError) {
            _context.next = 19;
            break;
          }

          _context.next = 18;
          return put(END);

        case 18:
          return _context.abrupt("return");

        case 19:
          _context.next = 22;
          break;

        case 21:
          if (action.meta.isDependentRequest) {
            serverRequestActions.dependentSuccessActions.push(action);
          } else {
            serverRequestActions.successActions.push(action);
          }

        case 22:
          index -= action.meta.isDependentRequest ? 2 : 1;

          if (!(index === 0)) {
            _context.next = 28;
            break;
          }

          serverRequestActions.requestActionsToIgnore = serverRequestActions.successActions.map(getRequestActionFromResponse).map(function (a) {
            return {
              type: a.type
            };
          });
          _context.next = 27;
          return put(END);

        case 27:
          return _context.abrupt("return");

        case 28:
          _context.next = 6;
          break;

        case 30:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}