import _regeneratorRuntime from "@babel/runtime/regenerator";
import _extends from "@babel/runtime/helpers/extends";

var _marked =
/*#__PURE__*/
_regeneratorRuntime.mark(sendRequest);

import { call, put, all, cancelled, getContext, setContext } from 'redux-saga/effects';
import { createSuccessAction, createErrorAction, createAbortAction, getActionPayload, isRequestAction } from '../actions';
import { INCORRECT_PAYLOAD_ERROR, RUN_BY_INTERCEPTOR, INTERCEPTORS } from '../constants';
import { getRequestsConfig } from './get-request-instance';

var getDriver = function getDriver(requestsConfig, action) {
  return action.meta && action.meta.driver ? requestsConfig.driver[action.meta.driver] : requestsConfig.driver["default"] || requestsConfig.driver;
};

export default function sendRequest(action, _temp) {
  var _ref, _ref$dispatchRequestA, dispatchRequestAction, _ref$silent, silent, _ref$runOnRequest, runOnRequest, _ref$runOnSuccess, runOnSuccess, _ref$runOnError, runOnError, _ref$runOnAbort, runOnAbort, runByInterceptor, requestsConfig, driver, actionPayload, _setContext, abortSource, response, responseError, _setContext2, _ref2, onErrorResponse, onErrorError, errorPayload, _setContext3, successPayload, _setContext4;

  return _regeneratorRuntime.wrap(function sendRequest$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _ref = _temp === void 0 ? {} : _temp, _ref$dispatchRequestA = _ref.dispatchRequestAction, dispatchRequestAction = _ref$dispatchRequestA === void 0 ? false : _ref$dispatchRequestA, _ref$silent = _ref.silent, silent = _ref$silent === void 0 ? false : _ref$silent, _ref$runOnRequest = _ref.runOnRequest, runOnRequest = _ref$runOnRequest === void 0 ? null : _ref$runOnRequest, _ref$runOnSuccess = _ref.runOnSuccess, runOnSuccess = _ref$runOnSuccess === void 0 ? null : _ref$runOnSuccess, _ref$runOnError = _ref.runOnError, runOnError = _ref$runOnError === void 0 ? null : _ref$runOnError, _ref$runOnAbort = _ref.runOnAbort, runOnAbort = _ref$runOnAbort === void 0 ? null : _ref$runOnAbort;

          if (isRequestAction(action)) {
            _context.next = 3;
            break;
          }

          throw new Error(INCORRECT_PAYLOAD_ERROR);

        case 3:
          _context.next = 5;
          return getContext(RUN_BY_INTERCEPTOR);

        case 5:
          runByInterceptor = _context.sent;
          _context.next = 8;
          return getRequestsConfig();

        case 8:
          requestsConfig = _context.sent;

          if (!(dispatchRequestAction && !silent)) {
            _context.next = 16;
            break;
          }

          action = _extends({}, action, {
            meta: _extends({}, action.meta, {
              runByWatcher: false
            })
          });
          _context.next = 13;
          return put(action);

        case 13:
          action = _context.sent;

          if (!(action === null)) {
            _context.next = 16;
            break;
          }

          return _context.abrupt("return", {
            serverSide: true
          });

        case 16:
          _context.next = 18;
          return call(getDriver, requestsConfig, action);

        case 18:
          driver = _context.sent;
          actionPayload = getActionPayload(action);

          if (!(requestsConfig.onRequest && (runOnRequest !== null ? runOnRequest : runByInterceptor !== INTERCEPTORS.ON_REQUEST))) {
            _context.next = 26;
            break;
          }

          _context.next = 23;
          return setContext((_setContext = {}, _setContext[RUN_BY_INTERCEPTOR] = INTERCEPTORS.ON_REQUEST, _setContext));

        case 23:
          _context.next = 25;
          return call(requestsConfig.onRequest, actionPayload.request, action);

        case 25:
          actionPayload.request = _context.sent;

        case 26:
          abortSource = driver.getAbortSource();
          _context.prev = 27;
          _context.prev = 28;

          if (!(action.meta && action.meta.cacheResponse)) {
            _context.next = 33;
            break;
          }

          response = action.meta.cacheResponse;
          _context.next = 42;
          break;

        case 33:
          if (Array.isArray(actionPayload.request)) {
            _context.next = 39;
            break;
          }

          _context.next = 36;
          return call([driver, 'sendRequest'], actionPayload.request, abortSource, action);

        case 36:
          response = _context.sent;
          _context.next = 42;
          break;

        case 39:
          _context.next = 41;
          return all(actionPayload.request.map(function (requestItem) {
            return call([driver, 'sendRequest'], requestItem, abortSource, action);
          }));

        case 41:
          response = _context.sent;

        case 42:
          _context.next = 47;
          break;

        case 44:
          _context.prev = 44;
          _context.t0 = _context["catch"](28);
          responseError = _context.t0;

        case 47:
          if (!responseError) {
            _context.next = 65;
            break;
          }

          if (!(requestsConfig.onError && (runOnError !== null ? runOnError : runByInterceptor !== INTERCEPTORS.ON_ERROR))) {
            _context.next = 57;
            break;
          }

          _context.next = 51;
          return setContext((_setContext2 = {}, _setContext2[RUN_BY_INTERCEPTOR] = INTERCEPTORS.ON_ERROR, _setContext2));

        case 51:
          _context.next = 53;
          return call(requestsConfig.onError, responseError, action);

        case 53:
          _ref2 = _context.sent;
          onErrorResponse = _ref2.response;
          onErrorError = _ref2.error;

          if (onErrorResponse) {
            response = onErrorResponse;
          } else {
            responseError = onErrorError;
          }

        case 57:
          if (response) {
            _context.next = 65;
            break;
          }

          _context.next = 60;
          return call(driver.getErrorPayload, responseError);

        case 60:
          errorPayload = _context.sent;

          if (silent) {
            _context.next = 64;
            break;
          }

          _context.next = 64;
          return put(createErrorAction(action, errorPayload));

        case 64:
          return _context.abrupt("return", {
            error: responseError
          });

        case 65:
          if (!(requestsConfig.onSuccess && (runOnSuccess !== null ? runOnSuccess : runByInterceptor !== INTERCEPTORS.ON_SUCCESS && runByInterceptor !== INTERCEPTORS.ON_ERROR))) {
            _context.next = 71;
            break;
          }

          _context.next = 68;
          return setContext((_setContext3 = {}, _setContext3[RUN_BY_INTERCEPTOR] = INTERCEPTORS.ON_SUCCESS, _setContext3));

        case 68:
          _context.next = 70;
          return call(requestsConfig.onSuccess, response, action);

        case 70:
          response = _context.sent;

        case 71:
          _context.next = 73;
          return call(driver.getSuccessPayload, response, actionPayload.request);

        case 73:
          successPayload = _context.sent;

          if (silent) {
            _context.next = 77;
            break;
          }

          _context.next = 77;
          return put(createSuccessAction(action, successPayload, response));

        case 77:
          return _context.abrupt("return", {
            response: response
          });

        case 78:
          _context.prev = 78;
          _context.next = 81;
          return cancelled();

        case 81:
          if (!_context.sent) {
            _context.next = 92;
            break;
          }

          _context.next = 84;
          return call([driver, 'abortRequest'], abortSource);

        case 84:
          if (!(requestsConfig.onAbort && (runOnAbort !== null ? runOnAbort : runByInterceptor !== INTERCEPTORS.ON_ABORT))) {
            _context.next = 89;
            break;
          }

          _context.next = 87;
          return setContext((_setContext4 = {}, _setContext4[RUN_BY_INTERCEPTOR] = INTERCEPTORS.ON_ABORT, _setContext4));

        case 87:
          _context.next = 89;
          return call(requestsConfig.onAbort, action);

        case 89:
          if (silent) {
            _context.next = 92;
            break;
          }

          _context.next = 92;
          return put(createAbortAction(action));

        case 92:
          return _context.finish(78);

        case 93:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[27,, 78, 93], [28, 44]]);
}