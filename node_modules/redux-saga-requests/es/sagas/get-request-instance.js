import _regeneratorRuntime from "@babel/runtime/regenerator";

var _marked =
/*#__PURE__*/
_regeneratorRuntime.mark(getRequestInstance);

import { getContext } from 'redux-saga/effects';
import { REQUESTS_CONFIG } from '../constants';
export function getRequestsConfig() {
  return getContext(REQUESTS_CONFIG);
}
export default function getRequestInstance(driverType) {
  var config, driver;
  return _regeneratorRuntime.wrap(function getRequestInstance$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (driverType === void 0) {
            driverType = null;
          }

          _context.next = 3;
          return getRequestsConfig();

        case 3:
          config = _context.sent;
          driver = driverType ? config.driver[driverType] : config.driver["default"] || config.driver;
          return _context.abrupt("return", driver.requestInstance);

        case 6:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}