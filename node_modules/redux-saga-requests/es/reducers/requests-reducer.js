import _extends from "@babel/runtime/helpers/extends";
import { success, error, abort, isSuccessAction, isResponseAction, getRequestActionFromResponse } from '../actions';
import mutationsReducer from './mutations-reducer';
import defaultConfig from './default-config'; // to support libraries like redux-act and redux-actions

var normalizeActionType = function normalizeActionType(actionType) {
  return typeof actionType === 'function' ? actionType.toString() : actionType;
};

var mutationConfigHasRequestKey = function mutationConfigHasRequestKey(config) {
  return typeof config !== 'boolean' && !!config.getRequestKey;
};

var getInitialState = function getInitialState(_ref) {
  var getDefaultData = _ref.getDefaultData,
      multiple = _ref.multiple,
      mutations = _ref.mutations,
      handleMutationsState = _ref.handleMutationsState;
  return {
    data: getDefaultData(multiple),
    pending: 0,
    error: null,
    mutations: handleMutationsState && mutations ? Object.entries(mutations).filter(function (_ref2) {
      var v = _ref2[1];
      return !v.local;
    }).reduce(function (prev, _ref3) {
      var _extends2;

      var k = _ref3[0],
          v = _ref3[1];
      return _extends({}, prev, (_extends2 = {}, _extends2[k] = mutationConfigHasRequestKey(v) ? {} : {
        error: null,
        pending: 0
      }, _extends2));
    }, {}) : null
  };
};

var getDataUpdater = function getDataUpdater(reducerConfig, mutationConfig) {
  if (mutationConfig === true || mutationConfig.updateData === true) {
    return reducerConfig.updateData || reducerConfig.getData;
  } else if (typeof mutationConfig === 'function') {
    return mutationConfig;
  } else if (typeof mutationConfig !== 'boolean' && typeof mutationConfig.updateData === 'function') {
    return mutationConfig.updateData;
  }

  return null;
};

var requestMutationReducer = function requestMutationReducer(state, action, config) {
  var mutationConfig = config.mutations[action.type];

  if (mutationConfig.updateDataOptimistic) {
    return _extends({}, state, {
      data: mutationConfig.updateDataOptimistic(state, action, config)
    });
  }

  if (mutationConfig.local) {
    var dataUpdater = getDataUpdater(config, mutationConfig);
    return _extends({}, state, {
      data: dataUpdater(state, action, config)
    });
  }

  return state;
};

var responseMutationReducer = function responseMutationReducer(state, action, config) {
  var requestAction = getRequestActionFromResponse(action);
  var mutationConfig = config.mutations[requestAction.type];

  if (isSuccessAction(action)) {
    var dataUpdater = getDataUpdater(config, mutationConfig);
    return dataUpdater ? _extends({}, state, {
      data: dataUpdater(state, action, config)
    }) : state;
  } // error or abort case


  return mutationConfig.revertData ? _extends({}, state, {
    data: mutationConfig.revertData(state, action, config)
  }) : state;
};

export default (function (localConfig) {
  var config = _extends({}, defaultConfig, {}, localConfig);

  var normalizedActionType = normalizeActionType(config.actionType);
  var shouldActionBeReset = typeof config.resetOn === 'function' ? config.resetOn : function (action) {
    return config.resetOn.map(normalizeActionType).includes(action.type);
  };
  return function (state, action) {
    if (action.meta && action.meta.mutations && normalizedActionType in action.meta.mutations && (!config.mutations || !(normalizedActionType in config.mutations))) {
      var _extends3;

      config.mutations = _extends({}, config.mutations, (_extends3 = {}, _extends3[action.type] = action.meta.mutations[normalizedActionType], _extends3));
    }

    var nextState = state || getInitialState(config);

    if (shouldActionBeReset(action)) {
      nextState = _extends({}, getInitialState(config), {
        pending: nextState.pending
      });
    }

    var requestAction = isResponseAction(action) ? getRequestActionFromResponse(action) : action;

    if (config.mutations && requestAction.type in config.mutations) {
      return _extends({}, isResponseAction(action) ? responseMutationReducer(nextState, action, config) : requestMutationReducer(nextState, action, config), {
        mutations: config.handleMutationsState ? mutationsReducer(nextState.mutations, action, config, config.mutations[requestAction.type]) : null
      });
    }

    switch (action.type) {
      case normalizedActionType:
        return config.onRequest(nextState, action, config);

      case success(normalizedActionType):
        return config.onSuccess(nextState, action, config);

      case error(normalizedActionType):
        return config.onError(nextState, action, config);

      case abort(normalizedActionType):
        return config.onAbort(nextState, action, config);

      default:
        return nextState;
    }
  };
});