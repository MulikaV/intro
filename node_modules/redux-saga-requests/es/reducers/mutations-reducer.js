import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

import { isErrorAction, isResponseAction, getRequestActionFromResponse } from '../actions';

var mutationConfigHasRequestKey = function mutationConfigHasRequestKey(config) {
  return typeof config !== 'boolean' && !!config.getRequestKey;
};

var updateMutationsForRequest = function updateMutationsForRequest(state, action, mutationConfig) {
  var _extends4;

  if (mutationConfig.local) {
    return state;
  }

  if (mutationConfigHasRequestKey(mutationConfig)) {
    var _extends2, _extends3;

    var requestKey = mutationConfig.getRequestKey(action);
    return _extends({}, state, (_extends3 = {}, _extends3[action.type] = _extends({}, state[action.type], (_extends2 = {}, _extends2[requestKey] = {
      error: null,
      pending: state[action.type] && state[action.type][requestKey] ? state[action.type][requestKey].pending + 1 : 1
    }, _extends2)), _extends3));
  }

  return _extends({}, state, (_extends4 = {}, _extends4[action.type] = {
    error: null,
    pending: (state[action.type] ? state[action.type].pending : 0) + 1
  }, _extends4));
};

export default (function (state, action, config, mutationConfig) {
  var _extends8;

  if (!isResponseAction(action)) {
    return updateMutationsForRequest(state, action, mutationConfig);
  }

  var requestAction = getRequestActionFromResponse(action);

  var _requestAction$type = requestAction.type,
      currentMutation = state[_requestAction$type],
      otherMutations = _objectWithoutPropertiesLoose(state, [_requestAction$type].map(_toPropertyKey));

  if (isErrorAction(action)) {
    var _extends5, _extends6;

    return _extends({}, otherMutations, (_extends6 = {}, _extends6[requestAction.type] = mutationConfigHasRequestKey(mutationConfig) ? _extends({}, currentMutation, (_extends5 = {}, _extends5[mutationConfig.getRequestKey(requestAction)] = {
      error: config.getError(state, action, config),
      pending: currentMutation[mutationConfig.getRequestKey(requestAction)].pending - 1
    }, _extends5)) : {
      error: config.getError(state, action, config),
      pending: currentMutation.pending - 1
    }, _extends6));
  } // success or abort case


  var getUpdatedCurrentMutation = function getUpdatedCurrentMutation() {
    if (!mutationConfigHasRequestKey(mutationConfig)) {
      return {
        error: null,
        pending: currentMutation.pending - 1
      };
    }

    var currentRequestKey = mutationConfig.getRequestKey(requestAction);

    var mutationForRequestKey = currentMutation[currentRequestKey],
        remainingMutations = _objectWithoutPropertiesLoose(currentMutation, [currentRequestKey].map(_toPropertyKey));

    if (mutationForRequestKey.pending !== 1) {
      var _extends7;

      return _extends({}, remainingMutations, (_extends7 = {}, _extends7[currentRequestKey] = {
        error: null,
        pending: mutationForRequestKey.pending - 1
      }, _extends7));
    }

    return remainingMutations;
  };

  return _extends({}, otherMutations, (_extends8 = {}, _extends8[requestAction.type] = getUpdatedCurrentMutation(), _extends8));
});