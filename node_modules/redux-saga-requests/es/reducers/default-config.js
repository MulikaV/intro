import _extends from "@babel/runtime/helpers/extends";
export default {
  multiple: false,
  getDefaultData: function getDefaultData(multiple) {
    return multiple ? [] : null;
  },
  getData: function getData(state, action) {
    return action.payload ? action.payload.data : action.data;
  },
  updateData: null,
  getError: function getError(state, action) {
    return action.payload ? action.payload : action.error;
  },
  onRequest: function onRequest(state) {
    return _extends({}, state, {
      pending: state.pending + 1,
      error: null
    });
  },
  onSuccess: function onSuccess(state, action, config) {
    return _extends({}, state, {
      data: config.getData(state, action, config),
      pending: state.pending - 1,
      error: null
    });
  },
  onError: function onError(state, action, config) {
    return _extends({}, state, {
      data: config.getDefaultData(config.multiple),
      pending: state.pending - 1,
      error: config.getError(state, action, config)
    });
  },
  onAbort: function onAbort(state) {
    return _extends({}, state, {
      pending: state.pending - 1
    });
  },
  resetOn: [],
  mutations: null,
  handleMutationsState: true
};