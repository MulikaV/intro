import _extends from "@babel/runtime/helpers/extends";
import { isRequestAction, isResponseAction, getRequestActionFromResponse, isRequestActionQuery } from '../actions';
import defaultConfig from './default-config';
import requestsReducer from './requests-reducer';
import mutationsReducer from './mutations-reducer';
export default (function (localConfig) {
  var config = _extends({
    isRequestActionQuery: isRequestActionQuery
  }, defaultConfig, {}, localConfig, {
    handleMutationsState: false
  });

  var requestsReducers = {}; // for SSR hydration

  var initialized = false;
  var hydratedReducers = null;
  return function (state, action) {
    if (state === void 0) {
      state = {
        queries: {},
        mutations: {}
      };
    }

    if (!initialized && Object.keys(state.queries).length > 0 && Object.keys(requestsReducers).length === 0) {
      initialized = true;
      var queryKeys = Object.keys(state.queries);
      hydratedReducers = new Set(queryKeys);
      queryKeys.forEach(function (k) {
        requestsReducers[k] = requestsReducer(_extends({}, config, {
          actionType: k
        }));
      });
    }

    if (isRequestAction(action) && config.isRequestActionQuery(action) && (!(action.type in requestsReducers) || hydratedReducers && hydratedReducers.has(action.type))) {
      requestsReducers[action.type] = requestsReducer(_extends({}, config, {
        actionType: action.type
      }, action.meta));

      if (hydratedReducers) {
        hydratedReducers["delete"](action.type);
      }
    }

    var queries = Object.entries(requestsReducers).reduce(function (prev, _ref) {
      var actionType = _ref[0],
          reducer = _ref[1];
      prev[actionType] = reducer(state.queries[actionType], action);
      return prev;
    }, {});
    var _state = state,
        mutations = _state.mutations;

    if (isRequestAction(action) && !config.isRequestActionQuery(action) || isResponseAction(action) && !config.isRequestActionQuery(getRequestActionFromResponse(action))) {
      mutations = mutationsReducer(mutations, action, config, {
        getRequestKey: action.meta && action.meta.mutations ? action.meta.mutations.getRequestKey : null
      });
    }

    return {
      queries: queries,
      mutations: mutations
    };
  };
});