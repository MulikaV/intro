{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { GET_REQUEST_CACHE, CLEAR_REQUESTS_CACHE } from '../constants';\nimport { isRequestAction, isSuccessAction, getRequestActionFromResponse, getActionPayload } from '../actions';\n\nvar isCacheValid = function isCacheValid(cache) {\n  return cache.expiring === null || Date.now() <= cache.expiring;\n};\n\nvar getNewCacheTimeout = function getNewCacheTimeout(cache) {\n  return cache === true ? null : cache * 1000 + Date.now();\n};\n\nvar getCacheKey = function getCacheKey(action) {\n  return action.type + (action.meta.cacheKey || '');\n};\n\nexport default (function () {\n  var cacheMap = new Map();\n  return function () {\n    return function (next) {\n      return function (action) {\n        if (action.type === GET_REQUEST_CACHE) {\n          return cacheMap;\n        }\n\n        if (action.type === CLEAR_REQUESTS_CACHE) {\n          if (action.actionTypes.length === 0) {\n            cacheMap.clear();\n          } else {\n            action.actionTypes.forEach(function (actionType) {\n              return cacheMap[\"delete\"](actionType);\n            });\n          }\n\n          return null;\n        }\n\n        if (isRequestAction(action) && action.meta && action.meta.cache) {\n          var cacheKey = getCacheKey(action);\n          var cacheValue = cacheMap.get(cacheKey);\n\n          if (cacheValue && isCacheValid(cacheValue)) {\n            return next(_extends({}, action, {\n              meta: _extends({}, action.meta, {\n                cacheResponse: cacheValue.response\n              })\n            }));\n          } else if (cacheValue && !isCacheValid(cacheValue)) {\n            cacheMap[\"delete\"](cacheKey);\n          }\n        } else if (isSuccessAction(action) && action.meta && action.meta.cache && !action.meta.cacheResponse) {\n          var requestAction = getRequestActionFromResponse(action);\n\n          if (action.meta.cacheKey && action.meta.cacheSize) {\n            var currentCacheKeys = Array.from(cacheMap.keys()).filter(function (k) {\n              return k.startsWith(requestAction.type);\n            });\n\n            if (action.meta.cacheSize === currentCacheKeys.length) {\n              cacheMap[\"delete\"](currentCacheKeys[0]);\n            }\n          }\n\n          cacheMap.set(getCacheKey(requestAction), {\n            response: getActionPayload(action).response,\n            expiring: getNewCacheTimeout(action.meta.cache)\n          });\n        }\n\n        return next(action);\n      };\n    };\n  };\n});","map":{"version":3,"sources":["/var/www/sites/Intro/node_modules/redux-saga-requests/es/middleware/requests-cache-middleware.js"],"names":["_extends","GET_REQUEST_CACHE","CLEAR_REQUESTS_CACHE","isRequestAction","isSuccessAction","getRequestActionFromResponse","getActionPayload","isCacheValid","cache","expiring","Date","now","getNewCacheTimeout","getCacheKey","action","type","meta","cacheKey","cacheMap","Map","next","actionTypes","length","clear","forEach","actionType","cacheValue","get","cacheResponse","response","requestAction","cacheSize","currentCacheKeys","Array","from","keys","filter","k","startsWith","set"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,QAAwD,cAAxD;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,4BAA3C,EAAyEC,gBAAzE,QAAiG,YAAjG;;AAEA,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC9C,SAAOA,KAAK,CAACC,QAAN,KAAmB,IAAnB,IAA2BC,IAAI,CAACC,GAAL,MAAcH,KAAK,CAACC,QAAtD;AACD,CAFD;;AAIA,IAAIG,kBAAkB,GAAG,SAASA,kBAAT,CAA4BJ,KAA5B,EAAmC;AAC1D,SAAOA,KAAK,KAAK,IAAV,GAAiB,IAAjB,GAAwBA,KAAK,GAAG,IAAR,GAAeE,IAAI,CAACC,GAAL,EAA9C;AACD,CAFD;;AAIA,IAAIE,WAAW,GAAG,SAASA,WAAT,CAAqBC,MAArB,EAA6B;AAC7C,SAAOA,MAAM,CAACC,IAAP,IAAeD,MAAM,CAACE,IAAP,CAAYC,QAAZ,IAAwB,EAAvC,CAAP;AACD,CAFD;;AAIA,gBAAgB,YAAY;AAC1B,MAAIC,QAAQ,GAAG,IAAIC,GAAJ,EAAf;AACA,SAAO,YAAY;AACjB,WAAO,UAAUC,IAAV,EAAgB;AACrB,aAAO,UAAUN,MAAV,EAAkB;AACvB,YAAIA,MAAM,CAACC,IAAP,KAAgBd,iBAApB,EAAuC;AACrC,iBAAOiB,QAAP;AACD;;AAED,YAAIJ,MAAM,CAACC,IAAP,KAAgBb,oBAApB,EAA0C;AACxC,cAAIY,MAAM,CAACO,WAAP,CAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;AACnCJ,YAAAA,QAAQ,CAACK,KAAT;AACD,WAFD,MAEO;AACLT,YAAAA,MAAM,CAACO,WAAP,CAAmBG,OAAnB,CAA2B,UAAUC,UAAV,EAAsB;AAC/C,qBAAOP,QAAQ,CAAC,QAAD,CAAR,CAAmBO,UAAnB,CAAP;AACD,aAFD;AAGD;;AAED,iBAAO,IAAP;AACD;;AAED,YAAItB,eAAe,CAACW,MAAD,CAAf,IAA2BA,MAAM,CAACE,IAAlC,IAA0CF,MAAM,CAACE,IAAP,CAAYR,KAA1D,EAAiE;AAC/D,cAAIS,QAAQ,GAAGJ,WAAW,CAACC,MAAD,CAA1B;AACA,cAAIY,UAAU,GAAGR,QAAQ,CAACS,GAAT,CAAaV,QAAb,CAAjB;;AAEA,cAAIS,UAAU,IAAInB,YAAY,CAACmB,UAAD,CAA9B,EAA4C;AAC1C,mBAAON,IAAI,CAACpB,QAAQ,CAAC,EAAD,EAAKc,MAAL,EAAa;AAC/BE,cAAAA,IAAI,EAAEhB,QAAQ,CAAC,EAAD,EAAKc,MAAM,CAACE,IAAZ,EAAkB;AAC9BY,gBAAAA,aAAa,EAAEF,UAAU,CAACG;AADI,eAAlB;AADiB,aAAb,CAAT,CAAX;AAKD,WAND,MAMO,IAAIH,UAAU,IAAI,CAACnB,YAAY,CAACmB,UAAD,CAA/B,EAA6C;AAClDR,YAAAA,QAAQ,CAAC,QAAD,CAAR,CAAmBD,QAAnB;AACD;AACF,SAbD,MAaO,IAAIb,eAAe,CAACU,MAAD,CAAf,IAA2BA,MAAM,CAACE,IAAlC,IAA0CF,MAAM,CAACE,IAAP,CAAYR,KAAtD,IAA+D,CAACM,MAAM,CAACE,IAAP,CAAYY,aAAhF,EAA+F;AACpG,cAAIE,aAAa,GAAGzB,4BAA4B,CAACS,MAAD,CAAhD;;AAEA,cAAIA,MAAM,CAACE,IAAP,CAAYC,QAAZ,IAAwBH,MAAM,CAACE,IAAP,CAAYe,SAAxC,EAAmD;AACjD,gBAAIC,gBAAgB,GAAGC,KAAK,CAACC,IAAN,CAAWhB,QAAQ,CAACiB,IAAT,EAAX,EAA4BC,MAA5B,CAAmC,UAAUC,CAAV,EAAa;AACrE,qBAAOA,CAAC,CAACC,UAAF,CAAaR,aAAa,CAACf,IAA3B,CAAP;AACD,aAFsB,CAAvB;;AAIA,gBAAID,MAAM,CAACE,IAAP,CAAYe,SAAZ,KAA0BC,gBAAgB,CAACV,MAA/C,EAAuD;AACrDJ,cAAAA,QAAQ,CAAC,QAAD,CAAR,CAAmBc,gBAAgB,CAAC,CAAD,CAAnC;AACD;AACF;;AAEDd,UAAAA,QAAQ,CAACqB,GAAT,CAAa1B,WAAW,CAACiB,aAAD,CAAxB,EAAyC;AACvCD,YAAAA,QAAQ,EAAEvB,gBAAgB,CAACQ,MAAD,CAAhB,CAAyBe,QADI;AAEvCpB,YAAAA,QAAQ,EAAEG,kBAAkB,CAACE,MAAM,CAACE,IAAP,CAAYR,KAAb;AAFW,WAAzC;AAID;;AAED,eAAOY,IAAI,CAACN,MAAD,CAAX;AACD,OAlDD;AAmDD,KApDD;AAqDD,GAtDD;AAuDD,CAzDD","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport { GET_REQUEST_CACHE, CLEAR_REQUESTS_CACHE } from '../constants';\nimport { isRequestAction, isSuccessAction, getRequestActionFromResponse, getActionPayload } from '../actions';\n\nvar isCacheValid = function isCacheValid(cache) {\n  return cache.expiring === null || Date.now() <= cache.expiring;\n};\n\nvar getNewCacheTimeout = function getNewCacheTimeout(cache) {\n  return cache === true ? null : cache * 1000 + Date.now();\n};\n\nvar getCacheKey = function getCacheKey(action) {\n  return action.type + (action.meta.cacheKey || '');\n};\n\nexport default (function () {\n  var cacheMap = new Map();\n  return function () {\n    return function (next) {\n      return function (action) {\n        if (action.type === GET_REQUEST_CACHE) {\n          return cacheMap;\n        }\n\n        if (action.type === CLEAR_REQUESTS_CACHE) {\n          if (action.actionTypes.length === 0) {\n            cacheMap.clear();\n          } else {\n            action.actionTypes.forEach(function (actionType) {\n              return cacheMap[\"delete\"](actionType);\n            });\n          }\n\n          return null;\n        }\n\n        if (isRequestAction(action) && action.meta && action.meta.cache) {\n          var cacheKey = getCacheKey(action);\n          var cacheValue = cacheMap.get(cacheKey);\n\n          if (cacheValue && isCacheValid(cacheValue)) {\n            return next(_extends({}, action, {\n              meta: _extends({}, action.meta, {\n                cacheResponse: cacheValue.response\n              })\n            }));\n          } else if (cacheValue && !isCacheValid(cacheValue)) {\n            cacheMap[\"delete\"](cacheKey);\n          }\n        } else if (isSuccessAction(action) && action.meta && action.meta.cache && !action.meta.cacheResponse) {\n          var requestAction = getRequestActionFromResponse(action);\n\n          if (action.meta.cacheKey && action.meta.cacheSize) {\n            var currentCacheKeys = Array.from(cacheMap.keys()).filter(function (k) {\n              return k.startsWith(requestAction.type);\n            });\n\n            if (action.meta.cacheSize === currentCacheKeys.length) {\n              cacheMap[\"delete\"](currentCacheKeys[0]);\n            }\n          }\n\n          cacheMap.set(getCacheKey(requestAction), {\n            response: getActionPayload(action).response,\n            expiring: getNewCacheTimeout(action.meta.cache)\n          });\n        }\n\n        return next(action);\n      };\n    };\n  };\n});"]},"metadata":{},"sourceType":"module"}