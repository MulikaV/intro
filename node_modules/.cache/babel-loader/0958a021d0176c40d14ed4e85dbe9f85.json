{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { isRequestAction, isResponseAction, getRequestActionFromResponse, isRequestActionQuery } from '../actions';\nimport defaultConfig from './default-config';\nimport requestsReducer from './requests-reducer';\nimport mutationsReducer from './mutations-reducer';\nexport default (function (localConfig) {\n  var config = _extends({\n    isRequestActionQuery: isRequestActionQuery\n  }, defaultConfig, {}, localConfig, {\n    handleMutationsState: false\n  });\n\n  var requestsReducers = {}; // for SSR hydration\n\n  var initialized = false;\n  var hydratedReducers = null;\n  return function (state, action) {\n    if (state === void 0) {\n      state = {\n        queries: {},\n        mutations: {}\n      };\n    }\n\n    if (!initialized && Object.keys(state.queries).length > 0 && Object.keys(requestsReducers).length === 0) {\n      initialized = true;\n      var queryKeys = Object.keys(state.queries);\n      hydratedReducers = new Set(queryKeys);\n      queryKeys.forEach(function (k) {\n        requestsReducers[k] = requestsReducer(_extends({}, config, {\n          actionType: k\n        }));\n      });\n    }\n\n    if (isRequestAction(action) && config.isRequestActionQuery(action) && (!(action.type in requestsReducers) || hydratedReducers && hydratedReducers.has(action.type))) {\n      requestsReducers[action.type] = requestsReducer(_extends({}, config, {\n        actionType: action.type\n      }, action.meta));\n\n      if (hydratedReducers) {\n        hydratedReducers[\"delete\"](action.type);\n      }\n    }\n\n    var queries = Object.entries(requestsReducers).reduce(function (prev, _ref) {\n      var actionType = _ref[0],\n          reducer = _ref[1];\n      prev[actionType] = reducer(state.queries[actionType], action);\n      return prev;\n    }, {});\n    var _state = state,\n        mutations = _state.mutations;\n\n    if (isRequestAction(action) && !config.isRequestActionQuery(action) || isResponseAction(action) && !config.isRequestActionQuery(getRequestActionFromResponse(action))) {\n      mutations = mutationsReducer(mutations, action, config, {\n        getRequestKey: action.meta && action.meta.mutations ? action.meta.mutations.getRequestKey : null\n      });\n    }\n\n    return {\n      queries: queries,\n      mutations: mutations\n    };\n  };\n});","map":{"version":3,"sources":["/var/www/sites/Intro/node_modules/redux-saga-requests/es/reducers/network-reducer.js"],"names":["_extends","isRequestAction","isResponseAction","getRequestActionFromResponse","isRequestActionQuery","defaultConfig","requestsReducer","mutationsReducer","localConfig","config","handleMutationsState","requestsReducers","initialized","hydratedReducers","state","action","queries","mutations","Object","keys","length","queryKeys","Set","forEach","k","actionType","type","has","meta","entries","reduce","prev","_ref","reducer","_state","getRequestKey"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport { isRequestAction, isResponseAction, getRequestActionFromResponse, isRequestActionQuery } from '../actions';\nimport defaultConfig from './default-config';\nimport requestsReducer from './requests-reducer';\nimport mutationsReducer from './mutations-reducer';\nexport default (function (localConfig) {\n  var config = _extends({\n    isRequestActionQuery: isRequestActionQuery\n  }, defaultConfig, {}, localConfig, {\n    handleMutationsState: false\n  });\n\n  var requestsReducers = {}; // for SSR hydration\n\n  var initialized = false;\n  var hydratedReducers = null;\n  return function (state, action) {\n    if (state === void 0) {\n      state = {\n        queries: {},\n        mutations: {}\n      };\n    }\n\n    if (!initialized && Object.keys(state.queries).length > 0 && Object.keys(requestsReducers).length === 0) {\n      initialized = true;\n      var queryKeys = Object.keys(state.queries);\n      hydratedReducers = new Set(queryKeys);\n      queryKeys.forEach(function (k) {\n        requestsReducers[k] = requestsReducer(_extends({}, config, {\n          actionType: k\n        }));\n      });\n    }\n\n    if (isRequestAction(action) && config.isRequestActionQuery(action) && (!(action.type in requestsReducers) || hydratedReducers && hydratedReducers.has(action.type))) {\n      requestsReducers[action.type] = requestsReducer(_extends({}, config, {\n        actionType: action.type\n      }, action.meta));\n\n      if (hydratedReducers) {\n        hydratedReducers[\"delete\"](action.type);\n      }\n    }\n\n    var queries = Object.entries(requestsReducers).reduce(function (prev, _ref) {\n      var actionType = _ref[0],\n          reducer = _ref[1];\n      prev[actionType] = reducer(state.queries[actionType], action);\n      return prev;\n    }, {});\n    var _state = state,\n        mutations = _state.mutations;\n\n    if (isRequestAction(action) && !config.isRequestActionQuery(action) || isResponseAction(action) && !config.isRequestActionQuery(getRequestActionFromResponse(action))) {\n      mutations = mutationsReducer(mutations, action, config, {\n        getRequestKey: action.meta && action.meta.mutations ? action.meta.mutations.getRequestKey : null\n      });\n    }\n\n    return {\n      queries: queries,\n      mutations: mutations\n    };\n  };\n});"]},"metadata":{},"sourceType":"module"}