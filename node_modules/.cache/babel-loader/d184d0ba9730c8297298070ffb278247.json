{"ast":null,"code":"import { success, isRequestAction, isResponseAction, getRequestActionFromResponse } from '../actions';\n\nvar shouldActionBePromisified = function shouldActionBePromisified(action, auto) {\n  return auto && !(action.meta && action.meta.asPromise === false) || action.meta && action.meta.asPromise;\n};\n\nexport default (function (_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$auto = _ref.auto,\n      auto = _ref$auto === void 0 ? false : _ref$auto;\n\n  var requestMap = new Map();\n  return function () {\n    return function (next) {\n      return function (action) {\n        if (isRequestAction(action) && shouldActionBePromisified(action, auto)) {\n          return new Promise(function (resolve, reject) {\n            requestMap.set(action, function (response, error) {\n              return error ? reject(response) : resolve(response);\n            });\n            next(action);\n          });\n        }\n\n        if (isResponseAction(action)) {\n          var requestAction = getRequestActionFromResponse(action);\n\n          if (shouldActionBePromisified(requestAction, auto)) {\n            var requestActionPromise = requestMap.get(requestAction);\n            requestActionPromise(action, action.type !== success(requestAction.type));\n            requestMap[\"delete\"](requestAction);\n          }\n        }\n\n        return next(action);\n      };\n    };\n  };\n});","map":{"version":3,"sources":["/var/www/sites/Intro/node_modules/redux-saga-requests/es/middleware/requests-promise-middleware.js"],"names":["success","isRequestAction","isResponseAction","getRequestActionFromResponse","shouldActionBePromisified","action","auto","meta","asPromise","_temp","_ref","_ref$auto","requestMap","Map","next","Promise","resolve","reject","set","response","error","requestAction","requestActionPromise","get","type"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,eAAlB,EAAmCC,gBAAnC,EAAqDC,4BAArD,QAAyF,YAAzF;;AAEA,IAAIC,yBAAyB,GAAG,SAASA,yBAAT,CAAmCC,MAAnC,EAA2CC,IAA3C,EAAiD;AAC/E,SAAOA,IAAI,IAAI,EAAED,MAAM,CAACE,IAAP,IAAeF,MAAM,CAACE,IAAP,CAAYC,SAAZ,KAA0B,KAA3C,CAAR,IAA6DH,MAAM,CAACE,IAAP,IAAeF,MAAM,CAACE,IAAP,CAAYC,SAA/F;AACD,CAFD;;AAIA,gBAAgB,UAAUC,KAAV,EAAiB;AAC/B,MAAIC,IAAI,GAAGD,KAAK,KAAK,KAAK,CAAf,GAAmB,EAAnB,GAAwBA,KAAnC;AAAA,MACIE,SAAS,GAAGD,IAAI,CAACJ,IADrB;AAAA,MAEIA,IAAI,GAAGK,SAAS,KAAK,KAAK,CAAnB,GAAuB,KAAvB,GAA+BA,SAF1C;;AAIA,MAAIC,UAAU,GAAG,IAAIC,GAAJ,EAAjB;AACA,SAAO,YAAY;AACjB,WAAO,UAAUC,IAAV,EAAgB;AACrB,aAAO,UAAUT,MAAV,EAAkB;AACvB,YAAIJ,eAAe,CAACI,MAAD,CAAf,IAA2BD,yBAAyB,CAACC,MAAD,EAASC,IAAT,CAAxD,EAAwE;AACtE,iBAAO,IAAIS,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CL,YAAAA,UAAU,CAACM,GAAX,CAAeb,MAAf,EAAuB,UAAUc,QAAV,EAAoBC,KAApB,EAA2B;AAChD,qBAAOA,KAAK,GAAGH,MAAM,CAACE,QAAD,CAAT,GAAsBH,OAAO,CAACG,QAAD,CAAzC;AACD,aAFD;AAGAL,YAAAA,IAAI,CAACT,MAAD,CAAJ;AACD,WALM,CAAP;AAMD;;AAED,YAAIH,gBAAgB,CAACG,MAAD,CAApB,EAA8B;AAC5B,cAAIgB,aAAa,GAAGlB,4BAA4B,CAACE,MAAD,CAAhD;;AAEA,cAAID,yBAAyB,CAACiB,aAAD,EAAgBf,IAAhB,CAA7B,EAAoD;AAClD,gBAAIgB,oBAAoB,GAAGV,UAAU,CAACW,GAAX,CAAeF,aAAf,CAA3B;AACAC,YAAAA,oBAAoB,CAACjB,MAAD,EAASA,MAAM,CAACmB,IAAP,KAAgBxB,OAAO,CAACqB,aAAa,CAACG,IAAf,CAAhC,CAApB;AACAZ,YAAAA,UAAU,CAAC,QAAD,CAAV,CAAqBS,aAArB;AACD;AACF;;AAED,eAAOP,IAAI,CAACT,MAAD,CAAX;AACD,OArBD;AAsBD,KAvBD;AAwBD,GAzBD;AA0BD,CAhCD","sourcesContent":["import { success, isRequestAction, isResponseAction, getRequestActionFromResponse } from '../actions';\n\nvar shouldActionBePromisified = function shouldActionBePromisified(action, auto) {\n  return auto && !(action.meta && action.meta.asPromise === false) || action.meta && action.meta.asPromise;\n};\n\nexport default (function (_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$auto = _ref.auto,\n      auto = _ref$auto === void 0 ? false : _ref$auto;\n\n  var requestMap = new Map();\n  return function () {\n    return function (next) {\n      return function (action) {\n        if (isRequestAction(action) && shouldActionBePromisified(action, auto)) {\n          return new Promise(function (resolve, reject) {\n            requestMap.set(action, function (response, error) {\n              return error ? reject(response) : resolve(response);\n            });\n            next(action);\n          });\n        }\n\n        if (isResponseAction(action)) {\n          var requestAction = getRequestActionFromResponse(action);\n\n          if (shouldActionBePromisified(requestAction, auto)) {\n            var requestActionPromise = requestMap.get(requestAction);\n            requestActionPromise(action, action.type !== success(requestAction.type));\n            requestMap[\"delete\"](requestAction);\n          }\n        }\n\n        return next(action);\n      };\n    };\n  };\n});"]},"metadata":{},"sourceType":"module"}