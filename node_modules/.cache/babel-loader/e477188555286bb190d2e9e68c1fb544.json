{"ast":null,"code":"import { createSelector } from 'reselect';\nvar defaultQueryState = {\n  data: null,\n  pending: 0,\n  error: null\n};\n\nvar getData = function getData(data, multiple, defaultData) {\n  if (data !== null) {\n    return data;\n  }\n\n  if (defaultData !== undefined) {\n    return defaultData;\n  }\n\n  if (multiple) {\n    return [];\n  }\n\n  return data;\n};\n\nexport var getQuery = function getQuery(_ref) {\n  var requestSelector = _ref.requestSelector,\n      type = _ref.type,\n      defaultData = _ref.defaultData,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? false : _ref$multiple;\n  return createSelector(function (state) {\n    return requestSelector ? requestSelector(state) : state.network.queries[type] || defaultQueryState;\n  }, function (queryState) {\n    return {\n      data: getData(queryState.data, multiple, defaultData),\n      loading: queryState.pending === undefined ? queryState.loading : queryState.pending > 0,\n      error: queryState.error\n    };\n  });\n};\nvar defaultMutation = {\n  loading: false,\n  error: null\n};\nexport var getMutation = function getMutation(_ref2) {\n  var requestSelector = _ref2.requestSelector,\n      type = _ref2.type,\n      requestKey = _ref2.requestKey;\n  return createSelector(function (state) {\n    return requestSelector ? requestSelector(state).mutations[type] : state.network.mutations[type];\n  }, function (mutationContainer) {\n    if (!mutationContainer || requestKey && !mutationContainer[requestKey]) {\n      return defaultMutation;\n    }\n\n    var mutation = requestKey ? mutationContainer[requestKey] : mutationContainer;\n    return {\n      loading: mutation.pending > 0,\n      error: mutation.error\n    };\n  });\n};","map":{"version":3,"sources":["/var/www/sites/Intro/node_modules/redux-saga-requests/es/selectors.js"],"names":["createSelector","defaultQueryState","data","pending","error","getData","multiple","defaultData","undefined","getQuery","_ref","requestSelector","type","_ref$multiple","state","network","queries","queryState","loading","defaultMutation","getMutation","_ref2","requestKey","mutations","mutationContainer","mutation"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,IAAIC,iBAAiB,GAAG;AACtBC,EAAAA,IAAI,EAAE,IADgB;AAEtBC,EAAAA,OAAO,EAAE,CAFa;AAGtBC,EAAAA,KAAK,EAAE;AAHe,CAAxB;;AAMA,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBH,IAAjB,EAAuBI,QAAvB,EAAiCC,WAAjC,EAA8C;AAC1D,MAAIL,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAOA,IAAP;AACD;;AAED,MAAIK,WAAW,KAAKC,SAApB,EAA+B;AAC7B,WAAOD,WAAP;AACD;;AAED,MAAID,QAAJ,EAAc;AACZ,WAAO,EAAP;AACD;;AAED,SAAOJ,IAAP;AACD,CAdD;;AAgBA,OAAO,IAAIO,QAAQ,GAAG,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AAC5C,MAAIC,eAAe,GAAGD,IAAI,CAACC,eAA3B;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,MAEIL,WAAW,GAAGG,IAAI,CAACH,WAFvB;AAAA,MAGIM,aAAa,GAAGH,IAAI,CAACJ,QAHzB;AAAA,MAIIA,QAAQ,GAAGO,aAAa,KAAK,KAAK,CAAvB,GAA2B,KAA3B,GAAmCA,aAJlD;AAKA,SAAOb,cAAc,CAAC,UAAUc,KAAV,EAAiB;AACrC,WAAOH,eAAe,GAAGA,eAAe,CAACG,KAAD,CAAlB,GAA4BA,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsBJ,IAAtB,KAA+BX,iBAAjF;AACD,GAFoB,EAElB,UAAUgB,UAAV,EAAsB;AACvB,WAAO;AACLf,MAAAA,IAAI,EAAEG,OAAO,CAACY,UAAU,CAACf,IAAZ,EAAkBI,QAAlB,EAA4BC,WAA5B,CADR;AAELW,MAAAA,OAAO,EAAED,UAAU,CAACd,OAAX,KAAuBK,SAAvB,GAAmCS,UAAU,CAACC,OAA9C,GAAwDD,UAAU,CAACd,OAAX,GAAqB,CAFjF;AAGLC,MAAAA,KAAK,EAAEa,UAAU,CAACb;AAHb,KAAP;AAKD,GARoB,CAArB;AASD,CAfM;AAgBP,IAAIe,eAAe,GAAG;AACpBD,EAAAA,OAAO,EAAE,KADW;AAEpBd,EAAAA,KAAK,EAAE;AAFa,CAAtB;AAIA,OAAO,IAAIgB,WAAW,GAAG,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AACnD,MAAIV,eAAe,GAAGU,KAAK,CAACV,eAA5B;AAAA,MACIC,IAAI,GAAGS,KAAK,CAACT,IADjB;AAAA,MAEIU,UAAU,GAAGD,KAAK,CAACC,UAFvB;AAGA,SAAOtB,cAAc,CAAC,UAAUc,KAAV,EAAiB;AACrC,WAAOH,eAAe,GAAGA,eAAe,CAACG,KAAD,CAAf,CAAuBS,SAAvB,CAAiCX,IAAjC,CAAH,GAA4CE,KAAK,CAACC,OAAN,CAAcQ,SAAd,CAAwBX,IAAxB,CAAlE;AACD,GAFoB,EAElB,UAAUY,iBAAV,EAA6B;AAC9B,QAAI,CAACA,iBAAD,IAAsBF,UAAU,IAAI,CAACE,iBAAiB,CAACF,UAAD,CAA1D,EAAwE;AACtE,aAAOH,eAAP;AACD;;AAED,QAAIM,QAAQ,GAAGH,UAAU,GAAGE,iBAAiB,CAACF,UAAD,CAApB,GAAmCE,iBAA5D;AACA,WAAO;AACLN,MAAAA,OAAO,EAAEO,QAAQ,CAACtB,OAAT,GAAmB,CADvB;AAELC,MAAAA,KAAK,EAAEqB,QAAQ,CAACrB;AAFX,KAAP;AAID,GAZoB,CAArB;AAaD,CAjBM","sourcesContent":["import { createSelector } from 'reselect';\nvar defaultQueryState = {\n  data: null,\n  pending: 0,\n  error: null\n};\n\nvar getData = function getData(data, multiple, defaultData) {\n  if (data !== null) {\n    return data;\n  }\n\n  if (defaultData !== undefined) {\n    return defaultData;\n  }\n\n  if (multiple) {\n    return [];\n  }\n\n  return data;\n};\n\nexport var getQuery = function getQuery(_ref) {\n  var requestSelector = _ref.requestSelector,\n      type = _ref.type,\n      defaultData = _ref.defaultData,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? false : _ref$multiple;\n  return createSelector(function (state) {\n    return requestSelector ? requestSelector(state) : state.network.queries[type] || defaultQueryState;\n  }, function (queryState) {\n    return {\n      data: getData(queryState.data, multiple, defaultData),\n      loading: queryState.pending === undefined ? queryState.loading : queryState.pending > 0,\n      error: queryState.error\n    };\n  });\n};\nvar defaultMutation = {\n  loading: false,\n  error: null\n};\nexport var getMutation = function getMutation(_ref2) {\n  var requestSelector = _ref2.requestSelector,\n      type = _ref2.type,\n      requestKey = _ref2.requestKey;\n  return createSelector(function (state) {\n    return requestSelector ? requestSelector(state).mutations[type] : state.network.mutations[type];\n  }, function (mutationContainer) {\n    if (!mutationContainer || requestKey && !mutationContainer[requestKey]) {\n      return defaultMutation;\n    }\n\n    var mutation = requestKey ? mutationContainer[requestKey] : mutationContainer;\n    return {\n      loading: mutation.pending > 0,\n      error: mutation.error\n    };\n  });\n};"]},"metadata":{},"sourceType":"module"}