{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(cancelSendRequestOnAction),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRequests);\n\nimport { call, fork, join, take, race, cancel } from 'redux-saga/effects';\nimport { isRequestAction, isRequestActionQuery } from '../actions';\nimport sendRequest from './send-request';\n/* eslint-disable */\n\nvar delay = require('redux-saga').delay || require('@redux-saga/delay-p')[\"default\"];\n/* eslint-enable */\n\n\nvar watchRequestsDefaultConfig = {\n  takeLatest: isRequestActionQuery,\n  abortOn: null,\n  getLastActionKey: function getLastActionKey(action) {\n    return action.type;\n  }\n};\nexport function cancelSendRequestOnAction(abortOn, task) {\n  var _ref, abortingAction;\n\n  return _regeneratorRuntime.wrap(function cancelSendRequestOnAction$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return race({\n            abortingAction: take(abortOn),\n            taskFinished: join(task),\n            timeout: call(delay, 10000) // taskFinished doesnt work for aborted tasks\n\n          });\n\n        case 2:\n          _ref = _context.sent;\n          abortingAction = _ref.abortingAction;\n\n          if (!abortingAction) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 7;\n          return cancel(task);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar isWatchable = function isWatchable(a) {\n  return isRequestAction(a) && (!a.meta || a.meta.runByWatcher !== false);\n};\n\nexport default function watchRequests(commonConfig) {\n  var lastTasks, config, action, lastActionKey, takeLatest, activeTask, newTask, abortOn;\n  return _regeneratorRuntime.wrap(function watchRequests$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (commonConfig === void 0) {\n            commonConfig = {};\n          }\n\n          lastTasks = {};\n          config = _extends({}, watchRequestsDefaultConfig, {}, commonConfig);\n\n        case 3:\n          if (!true) {\n            _context2.next = 24;\n            break;\n          }\n\n          _context2.next = 6;\n          return take(isWatchable);\n\n        case 6:\n          action = _context2.sent;\n          lastActionKey = config.getLastActionKey(action);\n          takeLatest = action.meta && action.meta.takeLatest !== undefined ? action.meta.takeLatest : typeof config.takeLatest === 'function' ? config.takeLatest(action) : config.takeLatest;\n\n          if (!takeLatest) {\n            _context2.next = 14;\n            break;\n          }\n\n          activeTask = lastTasks[lastActionKey];\n\n          if (!activeTask) {\n            _context2.next = 14;\n            break;\n          }\n\n          _context2.next = 14;\n          return cancel(activeTask);\n\n        case 14:\n          _context2.next = 16;\n          return fork(sendRequest, action);\n\n        case 16:\n          newTask = _context2.sent;\n\n          if (takeLatest) {\n            lastTasks[lastActionKey] = newTask;\n          }\n\n          abortOn = action.meta && action.meta.abortOn ? action.meta.abortOn : config.abortOn;\n\n          if (!abortOn) {\n            _context2.next = 22;\n            break;\n          }\n\n          _context2.next = 22;\n          return fork(cancelSendRequestOnAction, abortOn, newTask);\n\n        case 22:\n          _context2.next = 3;\n          break;\n\n        case 24:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/var/www/sites/Intro/node_modules/redux-saga-requests/es/sagas/watch-requests.js"],"names":["_extends","_regeneratorRuntime","_marked","mark","cancelSendRequestOnAction","_marked2","watchRequests","call","fork","join","take","race","cancel","isRequestAction","isRequestActionQuery","sendRequest","delay","require","watchRequestsDefaultConfig","takeLatest","abortOn","getLastActionKey","action","type","task","_ref","abortingAction","wrap","cancelSendRequestOnAction$","_context","prev","next","taskFinished","timeout","sent","stop","isWatchable","a","meta","runByWatcher","commonConfig","lastTasks","config","lastActionKey","activeTask","newTask","watchRequests$","_context2","undefined"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(cancelSendRequestOnAction),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRequests);\n\nimport { call, fork, join, take, race, cancel } from 'redux-saga/effects';\nimport { isRequestAction, isRequestActionQuery } from '../actions';\nimport sendRequest from './send-request';\n/* eslint-disable */\n\nvar delay = require('redux-saga').delay || require('@redux-saga/delay-p')[\"default\"];\n/* eslint-enable */\n\n\nvar watchRequestsDefaultConfig = {\n  takeLatest: isRequestActionQuery,\n  abortOn: null,\n  getLastActionKey: function getLastActionKey(action) {\n    return action.type;\n  }\n};\nexport function cancelSendRequestOnAction(abortOn, task) {\n  var _ref, abortingAction;\n\n  return _regeneratorRuntime.wrap(function cancelSendRequestOnAction$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return race({\n            abortingAction: take(abortOn),\n            taskFinished: join(task),\n            timeout: call(delay, 10000) // taskFinished doesnt work for aborted tasks\n\n          });\n\n        case 2:\n          _ref = _context.sent;\n          abortingAction = _ref.abortingAction;\n\n          if (!abortingAction) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 7;\n          return cancel(task);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar isWatchable = function isWatchable(a) {\n  return isRequestAction(a) && (!a.meta || a.meta.runByWatcher !== false);\n};\n\nexport default function watchRequests(commonConfig) {\n  var lastTasks, config, action, lastActionKey, takeLatest, activeTask, newTask, abortOn;\n  return _regeneratorRuntime.wrap(function watchRequests$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (commonConfig === void 0) {\n            commonConfig = {};\n          }\n\n          lastTasks = {};\n          config = _extends({}, watchRequestsDefaultConfig, {}, commonConfig);\n\n        case 3:\n          if (!true) {\n            _context2.next = 24;\n            break;\n          }\n\n          _context2.next = 6;\n          return take(isWatchable);\n\n        case 6:\n          action = _context2.sent;\n          lastActionKey = config.getLastActionKey(action);\n          takeLatest = action.meta && action.meta.takeLatest !== undefined ? action.meta.takeLatest : typeof config.takeLatest === 'function' ? config.takeLatest(action) : config.takeLatest;\n\n          if (!takeLatest) {\n            _context2.next = 14;\n            break;\n          }\n\n          activeTask = lastTasks[lastActionKey];\n\n          if (!activeTask) {\n            _context2.next = 14;\n            break;\n          }\n\n          _context2.next = 14;\n          return cancel(activeTask);\n\n        case 14:\n          _context2.next = 16;\n          return fork(sendRequest, action);\n\n        case 16:\n          newTask = _context2.sent;\n\n          if (takeLatest) {\n            lastTasks[lastActionKey] = newTask;\n          }\n\n          abortOn = action.meta && action.meta.abortOn ? action.meta.abortOn : config.abortOn;\n\n          if (!abortOn) {\n            _context2.next = 22;\n            break;\n          }\n\n          _context2.next = 22;\n          return fork(cancelSendRequestOnAction, abortOn, newTask);\n\n        case 22:\n          _context2.next = 3;\n          break;\n\n        case 24:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}"]},"metadata":{},"sourceType":"module"}